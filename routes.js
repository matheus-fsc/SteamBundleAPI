const express = require('express');
const { authenticateApiKey, adminRateLimit } = require('./middleware/auth');
const { validateInput } = require('./middleware/security');
const { storageSyncManager } = require('./services/storageSync');
const updateController = require('./services/updateController');
const { fetchAndSaveBundles } = require('./services/fetchBundles');
const { updateBundlesWithDetails } = require('./services/updateDetails/updateBundles-modular');

const router = express.Router();

// Proxy para bundles detalhadas
router.get('/api/bundles-detailed', validateInput, async (req, res) => {
    try {
        console.log('üì° [PROXY] Encaminhando requisi√ß√£o para a Storage API...');
        const detailedData = await storageSyncManager.getBundlesDetailed(req.query);
        res.json(detailedData);
    } catch (error) {
        console.error('‚ùå [PROXY] Erro ao buscar dados da Storage API:', error.message);
        res.status(502).json({ error: 'Erro ao comunicar com o servi√ßo de dados.' });
    }
});

// Proxy para op√ß√µes de filtro
router.get('/api/filter-options', validateInput, async (req, res) => {
    try {
        console.log('üì° [PROXY] Buscando op√ß√µes de filtro na Storage API...');
        const filterOptions = await storageSyncManager.getFilterOptions(req.query);
        res.json(filterOptions);
    } catch (error) {
        console.error('‚ùå [PROXY] Erro ao buscar op√ß√µes de filtro:', error.message);
        res.status(502).json({ error: 'Erro ao comunicar com o servi√ßo de dados.' });
    }
});

// Proxy para estat√≠sticas
router.get('/api/steam-stats', async (req, res) => {
    try {
        console.log('üì° [PROXY] Buscando estat√≠sticas na Storage API...');
        const stats = await storageSyncManager.getSteamStats(req.query);
        res.json(stats);
    } catch (error) {
        console.error('‚ùå [PROXY] Erro ao buscar estat√≠sticas:', error.message);
        res.status(502).json({ error: 'Erro ao comunicar com o servi√ßo de dados.' });
    }
});

// Endpoint para for√ßar uma atualiza√ß√£o (PROTEGIDO)
router.get('/api/force-update', authenticateApiKey, adminRateLimit, async (req, res) => {
    try {
        console.log('[ADMIN] Requisi√ß√£o de atualiza√ß√£o for√ßada recebida.');
        updateController.executeControlledUpdate(fetchAndSaveBundles, 'force-update-basic');
        updateController.executeControlledUpdate(updateBundlesWithDetails, 'force-update-detailed');
        res.status(202).json({ 
            message: 'Atualiza√ß√£o for√ßada iniciada em segundo plano.',
            status: updateController.getStatus() 
        });
    } catch (error) {
        res.status(500).json({ error: 'Erro ao iniciar atualiza√ß√£o for√ßada' });
    }
});

// Endpoint para atualizar os detalhes das bundles (PROTEGIDO)
router.get('/api/update-details', authenticateApiKey, adminRateLimit, async (req, res) => {
    try {
        console.log('[ADMIN] Iniciando atualiza√ß√£o de detalhes...');
        updateController.executeControlledUpdate(updateBundlesWithDetails, 'admin-update-details');
        res.status(202).json({ 
            message: 'Atualiza√ß√£o de detalhes iniciada em segundo plano.',
            status: updateController.getStatus() 
        });
    } catch (error) {
        res.status(500).json({ error: 'Erro ao iniciar atualiza√ß√£o de detalhes' });
    }
});

// Endpoint de teste para processar apenas algumas bundles (PROTEGIDO)
router.get('/api/test-update', authenticateApiKey, adminRateLimit, async (req, res) => {
    try {
        const limit = parseInt(req.query.limit) || 50;
        if (limit > 200) {
            return res.status(400).json({ 
                error: 'Limite m√°ximo de 200 bundles para teste',
                message: 'Use o endpoint /api/update-details para atualiza√ß√£o completa',
                current_limit: limit,
                maximum_allowed: 200,
                suggestion: 'Reduza o valor do par√¢metro limit ou use /api/force-update para atualiza√ß√£o completa'
            });
        }
        console.log(`[TEST] Iniciando atualiza√ß√£o de teste com ${limit} bundles...`);
        updateController.executeControlledUpdate(() => updateBundlesWithDetails('english', limit), 'test-update');
        res.status(202).json({ 
            message: `Teste de atualiza√ß√£o iniciado em segundo plano (${limit} bundles).`,
            status: updateController.getStatus() 
        });
    } catch (error) {
        res.status(500).json({ error: 'Erro ao iniciar teste de atualiza√ß√£o' });
    }
});

module.exports = router;