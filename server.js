// server.js - Ponto de entrada principal da aplica√ß√£o Scraper (Vers√£o Definitiva)

const express = require('express');
const helmet = require('helmet');
const compression = require('compression');
const cors = require('cors');
const cron = require('node-cron');
const moment = require('moment-timezone');

// --- Servi√ßos e M√≥dulos ---
const { getLogger } = require('./services/PersistentLogger');
const updateController = require('./services/updateController');
const { fetchAndSaveBundles } = require('./services/fetchBundles');
const { updateBundlesWithDetails } = require('./services/updateDetails/updateBundles-modular');
const routes = require('./routes');

// --- Inicializar Logger Persistente ---
const logger = getLogger();
logger.critical('SERVER_START', 'Servidor Steam Bundle API iniciando...', {
    node_version: process.version,
    environment: process.env.NODE_ENV,
    render_mode: process.env.RENDER_FREE_MODE === 'true'
});

// --- Middlewares ---
const { requestLogger, corsOptions } = require('./middleware/security');
const { healthCheck, errorHandler, notFoundHandler } = require('./middleware/monitoring');
const { publicRateLimit } = require('./middleware/auth');


// ====================================================================
// 1. CONFIGURA√á√ÉO DO EXPRESS
// ====================================================================
const app = express();
app.set('trust proxy', 1);

// Middlewares de Seguran√ßa e Performance
app.use(helmet());
app.use(compression());
app.use(cors(corsOptions));
app.use(express.json({ limit: '10mb' }));
app.use(requestLogger);
app.use(publicRateLimit);


// ====================================================================
// 2. CONFIGURA√á√ÉO DAS ROTAS
// ====================================================================
app.get('/health', healthCheck);

// [NOVO] Rota para monitorizar o estado do processo de atualiza√ß√£o
app.get('/api/update-status', (req, res) => {
  const status = updateController.getStatus();
  res.status(200).json(status);
});

app.use('/', routes); // Rotas principais da aplica√ß√£o
app.use(notFoundHandler); // Middleware para rotas n√£o encontradas (404)
app.use(errorHandler); // Middleware para tratamento de erros


// ====================================================================
// 3. CONFIGURA√á√ÉO DO AGENDADOR (CRON)
// ====================================================================
const TIMEZONE = process.env.TIMEZONE || 'America/Sao_Paulo';
const STEAM_UPDATE_SCHEDULE = {
    WEEKLY: '0 3 * * 0',      // üéØ NOVO PADR√ÉO: Domingos √†s 3h (processo demorado)
    OPTIMIZED: '0 3 * * 3,5', // Quartas e sextas √†s 3h (legado)
    DAILY: '0 3 * * *',       // Todos os dias √†s 3h (s√≥ para dev/teste)
    BIWEEKLY: '0 3 * * 0/2'   // A cada 2 semanas no domingo
};
const scheduleMode = process.env.UPDATE_SCHEDULE_MODE || 'WEEKLY';
const cronExpression = STEAM_UPDATE_SCHEDULE[scheduleMode] || STEAM_UPDATE_SCHEDULE.OPTIMIZED;

console.log(`üïê Configura√ß√£o de agendamento: ${scheduleMode} (${cronExpression})`);

cron.schedule(cronExpression, async () => {
    const logger = getLogger();
    logger.critical('CRON_UPDATE', `Atualiza√ß√£o agendada iniciada (${moment().tz(TIMEZONE).format('YYYY-MM-DD HH:mm:ss')})`);
    
    try {
        logger.milestone('CRON_UPDATE', 'Fase 1: Fetch b√°sico iniciado', 1, 2);
        await updateController.executeControlledUpdate(fetchAndSaveBundles, 'cron-fetch-basic');
        
        logger.milestone('CRON_UPDATE', 'Fase 2: Detalhamento iniciado', 2, 2);
        await updateController.executeControlledUpdate(updateBundlesWithDetails, 'cron-fetch-detailed');
        
        logger.critical('CRON_UPDATE', 'Atualiza√ß√£o agendada finalizada com sucesso');
    } catch (error) {
        logger.error('CRON_UPDATE', 'Erro durante atualiza√ß√£o agendada', error);
    }
}, { timezone: TIMEZONE });


// ====================================================================
// 4. INICIALIZA√á√ÉO DO SERVIDOR E L√ìGICA DE ARRANQUE
// ====================================================================
const PORT = process.env.PORT || 3000;

app.listen(PORT, async () => {
    logger.critical('SERVER_READY', `Servidor iniciado na porta ${PORT}`, {
        port: PORT,
        timestamp: new Date().toISOString()
    });
    console.log(`üöÄ Servidor a ser executado na porta ${PORT}`);
    
    try {
        // [ATUALIZADO] Inicializa o controlador e obt√©m o estado detalhado
        const initStatus = await updateController.initialize();
        
        // [ATUALIZADO] L√≥gica de arranque resiliente
        if (initStatus.needsBasicUpdate || initStatus.needsDetailedUpdate) {
            console.log('‚ú® [ARRANQUE] A disparar atualiza√ß√£o inicial ou de continua√ß√£o...');
            
            setTimeout(async () => {
                try {
                    // Executa a atualiza√ß√£o b√°sica apenas se for necess√°ria
                    if (initStatus.needsBasicUpdate) {
                        console.log('‚ú® [ARRANQUE] Etapa 1: A procurar bundles b√°sicos...');
                        await updateController.executeControlledUpdate(fetchAndSaveBundles, 'initial-fetch-basic');
                        
                        // ‚úÖ CORRE√á√ÉO CR√çTICA: Verificar se agora precisa da atualiza√ß√£o detalhada
                        console.log('üîç [ARRANQUE] Verificando se √© necess√°ria atualiza√ß√£o detalhada ap√≥s fetch b√°sico...');
                        const postBasicCheck = await updateController.checkForUpdatesNeeded();
                        
                        if (postBasicCheck.needsDetailedUpdate) {
                            console.log('‚ú® [ARRANQUE] Etapa 2: A procurar detalhes dos bundles (detectado automaticamente)...');
                            await updateController.executeControlledUpdate(updateBundlesWithDetails, 'initial-fetch-detailed');
                        } else {
                            console.log('‚ÑπÔ∏è [ARRANQUE] Atualiza√ß√£o detalhada n√£o necess√°ria ap√≥s fetch b√°sico.');
                        }
                    }
                    
                    // Executa a atualiza√ß√£o detalhada apenas se for necess√°ria (caso original)
                    if (initStatus.needsDetailedUpdate) {
                        console.log('‚ú® [ARRANQUE] Etapa 2: A procurar detalhes dos bundles...');
                        await updateController.executeControlledUpdate(updateBundlesWithDetails, 'initial-fetch-detailed');
                    }

                    console.log('‚úÖ [ARRANQUE] Rotinas de atualiza√ß√£o inicial conclu√≠das!');
                } catch (error) {
                    console.error('‚ùå [ARRANQUE] Erro durante a execu√ß√£o da atualiza√ß√£o inicial agendada:', error.message);
                }
            }, 5000); // Atraso de 5 segundos
        }
    } catch (error) {
        console.error('‚ùå [ARRANQUE] Erro cr√≠tico durante a inicializa√ß√£o do UpdateController:', error.message);
    }
});