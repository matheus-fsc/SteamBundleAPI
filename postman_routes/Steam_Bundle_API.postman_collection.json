{
	"info": {
		"_postman_id": "steam-bundle-api-collection",
		"name": "Steam Bundle API",
		"description": "Collection completa da Steam Bundle API com todos os endpoints dispon√≠veis\n\n**Configura√ß√£o:**\n- URL Base: {{base_url}}\n- API Key: {{api_key}}\n\n**Endpoints P√∫blicos:**\n- N√£o requerem autentica√ß√£o\n- Rate limit aplicado\n\n**Endpoints Admin:**\n- Requerem header: X-API-Key\n- Rate limit mais restritivo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "üîç Health & Status",
			"item": [
				{
					"name": "Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has healthy status\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						},
						"description": "Verifica se a API est√° online e funcionando"
					},
					"response": []
				},
				{
					"name": "API Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has API status\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status', 'online');",
									"    pm.expect(jsonData).to.have.property('data_summary');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						},
						"description": "Rota principal que retorna informa√ß√µes sobre o status da API e endpoints dispon√≠veis"
					},
					"response": []
				},
				{
					"name": "Steam Stats",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has statistics\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('api_status');",
									"    pm.expect(jsonData).to.have.property('data_status');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/steam-stats",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"steam-stats"
							]
						},
						"description": "Estat√≠sticas detalhadas da API, configura√ß√µes da Steam API e m√©tricas de performance"
					},
					"response": []
				}
			],
			"description": "Endpoints para verificar o status e sa√∫de da API"
		},
		{
			"name": "üì¶ Bundles Data",
			"item": [
				{
					"name": "Get Basic Bundles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has bundles data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('bundles');",
									"    pm.expect(jsonData).to.have.property('totalBundles');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/bundles",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"bundles"
							]
						},
						"description": "Retorna dados b√°sicos de bundles (sem detalhes de pre√ßos)"
					},
					"response": []
				},
				{
					"name": "Get Detailed Bundles (Paginated)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has paginated data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('bundles');",
									"    pm.expect(jsonData).to.have.property('page');",
									"    pm.expect(jsonData).to.have.property('totalPages');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/bundles-detailed?page=1&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"bundles-detailed"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "N√∫mero da p√°gina (padr√£o: 1)"
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Itens por p√°gina (padr√£o: 10)"
								}
							]
						},
						"description": "Endpoint principal para bundles com detalhes completos (pre√ßos, avalia√ß√µes, etc.) com pagina√ß√£o"
					},
					"response": []
				},
				{
					"name": "Get All Detailed Bundles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has complete data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('bundles');",
									"    pm.expect(jsonData).to.have.property('totalBundles');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/bundles-detailed-all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"bundles-detailed-all"
							]
						},
						"description": "Retorna TODOS os bundles detalhados de uma vez (sem pagina√ß√£o) - Use com cuidado em produ√ß√£o"
					},
					"response": []
				},
				{
					"name": "Get Smart Bundles (Auto-Backup)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has bundles data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('bundles');",
									"    pm.expect(jsonData).to.have.property('page');",
									"});",
									"",
									"// Verifica se foi servido backup ou dados normais",
									"const smartRedirect = pm.response.headers.get('X-Smart-Redirect');",
									"if (smartRedirect) {",
									"    console.log(`ü§ñ Smart Endpoint: ${smartRedirect}`);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/bundles-smart?page=1&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"bundles-smart"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "N√∫mero da p√°gina (padr√£o: 1)"
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Itens por p√°gina (padr√£o: 10)"
								}
							]
						},
						"description": "ü§ñ Endpoint inteligente que serve dados atuais ou backup automaticamente durante atualiza√ß√µes"
					},
					"response": []
				},
				{
					"name": "Get Filter Options",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has filter options\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('genres');",
									"    pm.expect(jsonData).to.have.property('categories');",
									"    pm.expect(jsonData).to.have.property('platforms');",
									"    pm.expect(jsonData).to.have.property('priceRange');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/filter-options",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"filter-options"
							]
						},
						"description": "Retorna op√ß√µes de filtro dispon√≠veis (g√™neros, categorias, plataformas, faixas de pre√ßo e desconto)"
					},
					"response": []
				}
			],
			"description": "Endpoints p√∫blicos para acessar dados de bundles"
		},
		{
			"name": "üìÅ Backup Data",
			"item": [
				{
					"name": "Get Basic Bundles Backup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Response has backup data\", function () {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('bundles');",
									"        pm.expect(jsonData).to.have.property('metadata');",
									"        pm.expect(jsonData.metadata.data_type).to.eql('backup_basic');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/bundles-old",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"bundles-old"
							]
						},
						"description": "Acessa backup dos bundles b√°sicos (dispon√≠vel apenas durante atualiza√ß√µes)"
					},
					"response": []
				},
				{
					"name": "Get Detailed Bundles Backup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 404\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test(\"Response has backup data\", function () {",
									"        const jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('bundles');",
									"        pm.expect(jsonData).to.have.property('metadata');",
									"        pm.expect(jsonData.metadata.data_quality).to.eql('backup_detailed');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/bundles-detailed-old?page=1&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"bundles-detailed-old"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "N√∫mero da p√°gina (padr√£o: 1)"
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Itens por p√°gina (padr√£o: 10)"
								}
							]
						},
						"description": "Acessa backup dos bundles detalhados (dispon√≠vel apenas durante atualiza√ß√µes)"
					},
					"response": []
				}
			],
			"description": "Endpoints de backup dispon√≠veis apenas durante atualiza√ß√µes da API"
		},
		{
			"name": "üîß Admin Operations",
			"item": [
				{
					"name": "Force Complete Update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Adiciona timestamp para tracking",
									"pm.globals.set(\"update_start_time\", new Date().toISOString());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Update completed successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('operation_summary');",
									"});",
									"",
									"// Log do tempo de execu√ß√£o",
									"const startTime = pm.globals.get(\"update_start_time\");",
									"if (startTime) {",
									"    const duration = new Date() - new Date(startTime);",
									"    console.log(`Update completed in ${Math.round(duration/1000)}s`);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text",
								"description": "API Key para autentica√ß√£o admin"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/force-update",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"force-update"
							]
						},
						"description": "For√ßa uma atualiza√ß√£o completa de todos os bundles (coleta b√°sica + detalhes). OPERA√á√ÉO DEMORADA (5-15 min)"
					},
					"response": []
				},
				{
					"name": "Update Details Only",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Details updated successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/update-details",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"update-details"
							]
						},
						"description": "Atualiza apenas os detalhes dos bundles existentes (mais r√°pido que update completo)"
					},
					"response": []
				},
				{
					"name": "Test Update (Limited)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test completed successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('test_summary');",
									"    pm.expect(jsonData).to.have.property('results');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/test-update?limit=50",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"test-update"
							],
							"query": [
								{
									"key": "limit",
									"value": "50",
									"description": "N√∫mero de bundles para testar (m√°x: 200)"
								}
							]
						},
						"description": "Executa atualiza√ß√£o de teste com n√∫mero limitado de bundles. √ötil para testar configura√ß√µes."
					},
					"response": []
				},
				{
					"name": "Clean Duplicates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cleanup completed successfully\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('operation_summary');",
									"    pm.expect(jsonData).to.have.property('cleanup_results');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Key",
								"value": "{{api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/clean-duplicates",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"clean-duplicates"
							]
						},
						"description": "Remove bundles duplicados dos arquivos de dados. Melhora performance e reduz tamanho dos arquivos."
					},
					"response": []
				}
			],
			"description": "Endpoints administrativos que requerem API Key"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Log da requisi√ß√£o sendo executada",
					"console.log(`üöÄ Executando: ${pm.request.method} ${pm.request.url}`);",
					"",
					"// Adiciona timestamp em cada requisi√ß√£o",
					"pm.request.headers.add({",
					"    key: 'X-Request-Time',",
					"    value: new Date().toISOString()",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Log global do resultado",
					"const responseTime = pm.response.responseTime;",
					"const statusCode = pm.response.code;",
					"console.log(`‚úÖ Resposta: ${statusCode} em ${responseTime}ms`);",
					"",
					"// Log de headers importantes",
					"const headers = pm.response.headers;",
					"const dataType = headers.get('X-Data-Type');",
					"const totalCount = headers.get('X-Total-Count');",
					"const cacheStatus = headers.get('X-Cache-Status');",
					"",
					"if (dataType) console.log(`üìä Tipo de dados: ${dataType}`);",
					"if (totalCount) console.log(`üìã Total de itens: ${totalCount}`);",
					"if (cacheStatus) console.log(`üíæ Cache: ${cacheStatus}`);"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://steambundleapi.onrender.com",
			"type": "string",
			"description": "URL base da API (produ√ß√£o)"
		},
		{
			"key": "api_key",
			"value": "your-api-key-here",
			"type": "string",
			"description": "Sua API Key para endpoints administrativos"
		}
	]
}
