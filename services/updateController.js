/**
 * Servi√ßo de Controle de Atualiza√ß√µes
 * Gerencia o estado e coordena√ß√£o de atualiza√ß√µes para prevenir conflitos
 */

class UpdateController {
    constructor() {
        this.updateState = {
            isUpdating: false,
            updateType: null, // 'basic' | 'detailed' | 'force-basic' | 'force-detailed' | etc.
            startTime: null,
            lastUpdateAttempt: null,
            updatePromise: null,
            requestCount: 0 // Contador de requisi√ß√µes durante atualiza√ß√£o
        };
        
        // Configura√ß√µes
        this.config = {
            minTimeBetweenUpdates: 30000, // 30 segundos
            maxUpdateDuration: 900000,    // 15 minutos
            logPrefix: '[UPDATE CONTROLLER]'
        };
    }

    /**
     * Verifica se uma atualiza√ß√£o est√° em andamento
     */
    isUpdateInProgress() {
        // Verifica se a atualiza√ß√£o n√£o est√° "travada" h√° muito tempo
        if (this.updateState.isUpdating && this.updateState.startTime) {
            const elapsed = new Date() - this.updateState.startTime;
            if (elapsed > this.config.maxUpdateDuration) {
                console.warn(`${this.config.logPrefix} Atualiza√ß√£o ${this.updateState.updateType} excedeu tempo limite (${Math.round(elapsed/1000)}s), resetando...`);
                this.forceReset();
                return false;
            }
        }
        
        return this.updateState.isUpdating;
    }

    /**
     * Marca in√≠cio de atualiza√ß√£o
     */
    startUpdate(type) {
        this.updateState.isUpdating = true;
        this.updateState.updateType = type;
        this.updateState.startTime = new Date();
        this.updateState.lastUpdateAttempt = new Date();
        this.updateState.requestCount = 0;
        
        console.log(`${this.config.logPrefix} Iniciando atualiza√ß√£o "${type}"...`);
        return this.updateState.startTime;
    }

    /**
     * Marca fim de atualiza√ß√£o
     */
    endUpdate(success = true) {
        const duration = this.updateState.startTime ? 
            Math.round((new Date() - this.updateState.startTime) / 1000) : 0;
        
        const status = success ? '‚úÖ' : '‚ùå';
        console.log(`${status} ${this.config.logPrefix} Atualiza√ß√£o "${this.updateState.updateType}" finalizada em ${duration}s (${this.updateState.requestCount} requisi√ß√µes durante o processo)`);
        
        this.updateState.isUpdating = false;
        this.updateState.updateType = null;
        this.updateState.startTime = null;
        this.updateState.updatePromise = null;
        this.updateState.requestCount = 0;
        
        return { duration, success };
    }

    /**
     * For√ßa reset do estado (em caso de travamento)
     */
    forceReset() {
        console.warn(`${this.config.logPrefix} For√ßando reset do estado de atualiza√ß√£o`);
        this.updateState = {
            isUpdating: false,
            updateType: null,
            startTime: null,
            lastUpdateAttempt: this.updateState.lastUpdateAttempt,
            updatePromise: null,
            requestCount: 0
        };
    }

    /**
     * Incrementa contador de requisi√ß√µes durante atualiza√ß√£o
     */
    incrementRequestCount() {
        if (this.updateState.isUpdating) {
            this.updateState.requestCount++;
        }
    }

    /**
     * Verifica se pode iniciar uma nova atualiza√ß√£o
     */
    canTriggerUpdate() {
        // Se j√° est√° atualizando, n√£o pode
        if (this.isUpdateInProgress()) {
            return false;
        }

        // Se √∫ltima tentativa foi muito recente, n√£o pode
        if (this.updateState.lastUpdateAttempt) {
            const timeSinceLastAttempt = new Date() - this.updateState.lastUpdateAttempt;
            return timeSinceLastAttempt >= this.config.minTimeBetweenUpdates;
        }

        return true;
    }

    /**
     * Executa atualiza√ß√£o de forma controlada
     */
    async executeControlledUpdate(updateFunction, type) {
        // Se j√° est√° atualizando, retorna a Promise existente
        if (this.updateState.isUpdating && this.updateState.updatePromise) {
            console.log(`‚è≥ ${this.config.logPrefix} Atualiza√ß√£o "${type}" j√° em andamento, aguardando conclus√£o...`);
            this.incrementRequestCount();
            return this.updateState.updatePromise;
        }

        // Se n√£o pode iniciar nova atualiza√ß√£o
        if (!this.canTriggerUpdate()) {
            const timeSinceLastAttempt = Math.round((new Date() - this.updateState.lastUpdateAttempt) / 1000);
            console.log(`‚è±Ô∏è ${this.config.logPrefix} Ignorando atualiza√ß√£o "${type}" - √∫ltima tentativa h√° ${timeSinceLastAttempt}s (m√≠n: ${this.config.minTimeBetweenUpdates/1000}s)`);
            return Promise.resolve({ skipped: true, reason: 'too_recent' });
        }

        this.startUpdate(type);
        
        // Cria a Promise de atualiza√ß√£o
        this.updateState.updatePromise = this._executeUpdate(updateFunction, type);
        
        return this.updateState.updatePromise;
    }

    /**
     * Executa a atualiza√ß√£o com tratamento de erro
     */
    async _executeUpdate(updateFunction, type) {
        try {
            console.log(`üöÄ ${this.config.logPrefix} Executando atualiza√ß√£o "${type}"...`);
            const result = await updateFunction();
            this.endUpdate(true);
            return { success: true, result, type };
        } catch (error) {
            console.error(`‚ùå ${this.config.logPrefix} Erro na atualiza√ß√£o "${type}":`, error.message);
            this.endUpdate(false);
            throw error;
        }
    }

    /**
     * Retorna o status atual do controlador
     */
    getStatus() {
        return {
            isUpdating: this.updateState.isUpdating,
            updateType: this.updateState.updateType,
            startTime: this.updateState.startTime,
            duration: this.updateState.startTime ? 
                Math.round((new Date() - this.updateState.startTime) / 1000) : null,
            lastUpdateAttempt: this.updateState.lastUpdateAttempt,
            canTriggerUpdate: this.canTriggerUpdate(),
            requestCount: this.updateState.requestCount,
            config: this.config
        };
    }

    /**
     * Retorna informa√ß√µes de diagn√≥stico
     */
    getDiagnostics() {
        const status = this.getStatus();
        return {
            ...status,
            diagnostics: {
                isHealthy: !status.isUpdating || (status.duration && status.duration < this.config.maxUpdateDuration / 1000),
                recommendations: [
                    status.isUpdating && status.duration > 300 ? 
                        'Atualiza√ß√£o em andamento h√° mais de 5 minutos - monitore' : null,
                    status.requestCount > 10 ? 
                        'Muitas requisi√ß√µes durante atualiza√ß√£o - poss√≠vel sobrecarga' : null,
                    !status.canTriggerUpdate && !status.isUpdating ? 
                        'Aguardando intervalo m√≠nimo entre atualiza√ß√µes' : null
                ].filter(Boolean)
            }
        };
    }
}

// Singleton para garantir uma √∫nica inst√¢ncia
const updateController = new UpdateController();

module.exports = updateController;
