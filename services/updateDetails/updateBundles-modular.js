/**
 * MIGRA√á√ÉO PARA ARQUITETURA MODULAR V2
 * Este arquivo mant√©m compatibilidade com o updateBundles.js original
 * enquanto utiliza a nova arquitetura modular organizada em updateDetails/
 */

// Importa√ß√µes dos m√≥dulos reorganizados
const { AdaptivePerformanceManager } = require('./AdaptivePerformanceManager');
const { FailedBundlesManager } = require('./FailedBundlesManager');
const { BundleScrapingService } = require('./BundleScrapingService');
const { StateManager } = require('./StateManager');
const { StorageSyncService } = require('./StorageSyncService');
const { UpdateBundlesOrchestrator } = require('./UpdateBundlesOrchestrator');

// Importa√ß√£o do storage sync existente
const { storageSyncManager } = require('../storageSync');

console.log('üèóÔ∏è  MIGRA√á√ÉO MODULAR V2 - Arquitetura reorganizada em updateDetails/');
console.log('');
console.log('üìÅ ESTRUTURA MODULAR:');
console.log('   üìä AdaptivePerformanceManager - Sistema de otimiza√ß√£o adaptativa');
console.log('   ‚ùå FailedBundlesManager - Gerenciamento de falhas e retry');
console.log('   üåê BundleScrapingService - Scraping e extra√ß√£o de dados');
console.log('   üíæ StateManager - Gerenciamento de estado e persist√™ncia');
console.log('   ‚òÅÔ∏è  StorageSyncService - Sincroniza√ß√£o com Storage API');
console.log('   üé≠ UpdateBundlesOrchestrator - Orquestrador principal');
console.log('');

// Instancia√ß√£o dos servi√ßos
const storageSyncService = new StorageSyncService(storageSyncManager);
const stateManager = new StateManager();
const adaptiveManager = new AdaptivePerformanceManager();
const failedManager = new FailedBundlesManager(storageSyncManager);
const scrapingService = new BundleScrapingService();

// Orquestrador principal
const orchestrator = new UpdateBundlesOrchestrator({
    storageSyncService,
    stateManager,
    adaptiveManager,
    failedManager,
    scrapingService
});

/**
 * Fun√ß√£o principal compat√≠vel com o sistema original
 */
const updateBundlesWithDetails = async (language = 'brazilian', limitForTesting = null) => {
    console.log('üöÄ INICIANDO ATUALIZA√á√ÉO COM ARQUITETURA MODULAR V2');
    console.log(`üìÅ M√≥dulos carregados de: services/updateDetails/`);
    console.log('');
    
    return await orchestrator.updateBundlesWithDetails(language, limitForTesting);
};

/**
 * Fun√ß√£o para verificar e retomar atualiza√ß√µes incompletas
 */
const checkAndResumeUpdate = async () => {
    return await orchestrator.checkAndResumeUpdate();
};

/**
 * Fun√ß√£o para processar fila de retry
 */
const processRetryQueue = async () => {
    return await orchestrator.processRetryQueue();
};

/**
 * Fun√ß√£o para obter status do sistema
 */
const getSystemStatus = () => {
    return {
        modular: true,
        version: '2.0',
        architecture: 'updateDetails/',
        modules: {
            adaptive: !!adaptiveManager,
            failed: !!failedManager,
            scraping: !!scrapingService,
            state: !!stateManager,
            storage: !!storageSyncService,
            orchestrator: !!orchestrator
        },
        compatibility: 'Full backward compatibility maintained'
    };
};

console.log('‚úÖ MIGRA√á√ÉO MODULAR CONCLU√çDA - Sistema pronto para uso');
console.log('');
console.log('üîß FUNCIONALIDADES DISPON√çVEIS:');
console.log('   ‚Ä¢ updateBundlesWithDetails() - Fun√ß√£o principal de atualiza√ß√£o');
console.log('   ‚Ä¢ checkAndResumeUpdate() - Verifica√ß√£o e retomada de atualiza√ß√µes');
console.log('   ‚Ä¢ processRetryQueue() - Processamento de fila de retry');
console.log('   ‚Ä¢ getSystemStatus() - Status do sistema modular');
console.log('');
console.log('üéØ BENEF√çCIOS DA REFATORA√á√ÉO:');
console.log('   ‚úÖ C√≥digo organizado em m√≥dulos especializados');
console.log('   ‚úÖ Manuten√ß√£o simplificada e isolada');
console.log('   ‚úÖ Reutiliza√ß√£o de componentes');
console.log('   ‚úÖ Compatibilidade total com sistema anterior');
console.log('   ‚úÖ Estrutura escal√°vel para futuras expans√µes');
console.log('');

// Exporta√ß√µes para manter compatibilidade
module.exports = {
    updateBundlesWithDetails,
    checkAndResumeUpdate,
    processRetryQueue,
    getSystemStatus,
    
    // Acesso direto aos m√≥dulos se necess√°rio
    modules: {
        orchestrator,
        adaptiveManager,
        failedManager,
        scrapingService,
        stateManager,
        storageSyncService
    }
};
